spring:
  config:
    activate:
      on-profile: prod
  datasource:
    driver-class-name: org.postgresql.Driver
    #    url: jdbc:postgresql://${SPRING_DATABASE_HOST}:5432/${SPRING_DATABASE_NAME}
    url: jdbc:postgresql:///${SPRING_DATABASE_NAME}?cloudSqlInstance=${SPRING_DATABASE_HOST}&socketFactory=com.google.cloud.sql.postgres.SocketFactory
    username: ${SPRING_DATABASE_USERNAME}
    password: ${SPRING_DATABASE_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        format_sql: false
        default_schema: ${SPRING_DATABASE_SCHEMA:gyuchanlee} # postgresql의 기본 스키마로 내 꺼 지정
  jackson:
    property-naming-strategy: SNAKE_CASE # JSON 요청 형식 스네이크로 오는것을 카멜케이스로 자동 변환 (거꾸로도 지원)
  # google storage 세팅
  cloud:
    gcp:
      credentials:
      project-id: ${GOOGLE_CLOUD_STORAGE_PROJECT_ID}
      storage:
        credentials:
        project-id: ${GOOGLE_CLOUD_STORAGE_PROJECT_ID}

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

# Google 클라우드 스토리지 버킷 이름 설정 (커스텀 프로퍼티)
google:
  cloud:
    storage:
      bucket-name: ${GOOGLE_CLOUD_STORAGE_BUCKET}

logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE


# JWT 설정
jwt:
  secret: ${SPRING_JWT_SECRET}
  access-expiration: ${SPRING_JWT_ACCESS_EXPIRATION:3600000}  # 60 min: 기본값 설정
  refresh-expiration: ${SPRING_JWT_REFRESH_EXPIRATION:2592000000}  # 30 days : 기본값 설정

# Cors 프론트 url 설정
cors:
  allowed-origins: ${FRONT_URL:http://localhost:3000}